<FUNCTION>
<NAME>kmod_new</NAME>
<RETURNS>struct kmod_ctx  *</RETURNS>
const char *dirname, const char * const *config_paths
</FUNCTION>
<FUNCTION>
<NAME>kmod_ref</NAME>
<RETURNS>struct kmod_ctx  *</RETURNS>
struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_unref</NAME>
<RETURNS>struct kmod_ctx  *</RETURNS>
struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_set_log_fn</NAME>
<RETURNS>void  </RETURNS>
struct kmod_ctx *ctx, void (*log_fn)(void *log_data, int priority, const char *file, int line, const char *fn, const char *format, va_list args), const void *data
</FUNCTION>
<FUNCTION>
<NAME>kmod_get_log_priority</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_set_log_priority</NAME>
<RETURNS>void  </RETURNS>
struct kmod_ctx *ctx, int priority
</FUNCTION>
<FUNCTION>
<NAME>kmod_get_userdata</NAME>
<RETURNS>void  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_set_userdata</NAME>
<RETURNS>void  </RETURNS>
struct kmod_ctx *ctx, const void *userdata
</FUNCTION>
<FUNCTION>
<NAME>kmod_get_dirname</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_load_resources</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_unload_resources</NAME>
<RETURNS>void  </RETURNS>
struct kmod_ctx *ctx
</FUNCTION>
<ENUM>
<NAME>kmod_resources</NAME>
enum kmod_resources {
	KMOD_RESOURCES_OK = 0,
	KMOD_RESOURCES_MUST_RELOAD = 1,
	KMOD_RESOURCES_MUST_RECREATE = 2,
};
</ENUM>
<FUNCTION>
<NAME>kmod_validate_resources</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx
</FUNCTION>
<ENUM>
<NAME>kmod_index</NAME>
enum kmod_index {
	KMOD_INDEX_MODULES_DEP = 0,
	KMOD_INDEX_MODULES_ALIAS,
	KMOD_INDEX_MODULES_SYMBOL,
	KMOD_INDEX_MODULES_BUILTIN,
	/* Padding to make sure enum is not mapped to char */
	_KMOD_INDEX_PAD = (1 << 31),
};
</ENUM>
<FUNCTION>
<NAME>kmod_dump_index</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx, enum kmod_index type, int fd
</FUNCTION>
<FUNCTION>
<NAME>kmod_list_next</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_list *list, const struct kmod_list *curr
</FUNCTION>
<FUNCTION>
<NAME>kmod_list_prev</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_list *list, const struct kmod_list *curr
</FUNCTION>
<FUNCTION>
<NAME>kmod_list_last</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_list *list
</FUNCTION>
<MACRO>
<NAME>kmod_list_foreach</NAME>
#define kmod_list_foreach(list_entry, first_entry) \
	for (list_entry = first_entry; \
		list_entry != NULL; \
		list_entry = kmod_list_next(first_entry, list_entry))
</MACRO>
<MACRO>
<NAME>kmod_list_foreach_reverse</NAME>
#define kmod_list_foreach_reverse(list_entry, first_entry) \
	for (list_entry = kmod_list_last(first_entry); \
		list_entry != NULL; \
		list_entry = kmod_list_prev(first_entry, list_entry))
</MACRO>
<FUNCTION>
<NAME>kmod_config_get_blacklists</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_get_install_commands</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_get_remove_commands</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_get_aliases</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_get_options</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_get_softdeps</NAME>
<RETURNS>struct kmod_config_iter  *</RETURNS>
const struct kmod_ctx *ctx
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_iter_get_key</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_config_iter *iter
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_iter_get_value</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_config_iter *iter
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_iter_next</NAME>
<RETURNS>bool  </RETURNS>
struct kmod_config_iter *iter
</FUNCTION>
<FUNCTION>
<NAME>kmod_config_iter_free_iter</NAME>
<RETURNS>void  </RETURNS>
struct kmod_config_iter *iter
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_new_from_name</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx, const char *name, struct kmod_module **mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_new_from_path</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx, const char *path, struct kmod_module **mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_new_from_lookup</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx, const char *given_alias, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_new_from_loaded</NAME>
<RETURNS>int  </RETURNS>
struct kmod_ctx *ctx, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_ref</NAME>
<RETURNS>struct kmod_module  *</RETURNS>
struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_unref</NAME>
<RETURNS>struct kmod_module  *</RETURNS>
struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_unref_list</NAME>
<RETURNS>int  </RETURNS>
struct kmod_list *list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_module</NAME>
<RETURNS>struct kmod_module  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<ENUM>
<NAME>kmod_remove</NAME>
enum kmod_remove {
	KMOD_REMOVE_FORCE = O_TRUNC,
	KMOD_REMOVE_NOWAIT = O_NONBLOCK, /* always set */
};
</ENUM>
<ENUM>
<NAME>kmod_insert</NAME>
enum kmod_insert {
	KMOD_INSERT_FORCE_VERMAGIC = 0x1,
	KMOD_INSERT_FORCE_MODVERSION = 0x2,
};
</ENUM>
<ENUM>
<NAME>kmod_probe</NAME>
enum kmod_probe {
	KMOD_PROBE_FORCE_VERMAGIC =		0x00001,
	KMOD_PROBE_FORCE_MODVERSION =		0x00002,
	KMOD_PROBE_IGNORE_COMMAND =		0x00004,
	KMOD_PROBE_IGNORE_LOADED =		0x00008,
	KMOD_PROBE_DRY_RUN =			0x00010,
	KMOD_PROBE_FAIL_ON_LOADED =		0x00020,

	/* codes below can be used in return value, too */
	KMOD_PROBE_APPLY_BLACKLIST_ALL =	0x10000,
	KMOD_PROBE_APPLY_BLACKLIST =		0x20000,
	KMOD_PROBE_APPLY_BLACKLIST_ALIAS_ONLY =	0x40000,
};
</ENUM>
<ENUM>
<NAME>kmod_filter</NAME>
enum kmod_filter {
	KMOD_FILTER_BLACKLIST = 0x00001,
	KMOD_FILTER_BUILTIN = 0x00002,
};
</ENUM>
<FUNCTION>
<NAME>kmod_module_remove_module</NAME>
<RETURNS>int  </RETURNS>
struct kmod_module *mod, unsigned int flags
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_insert_module</NAME>
<RETURNS>int  </RETURNS>
struct kmod_module *mod, unsigned int flags, const char *options
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_probe_insert_module</NAME>
<RETURNS>int  </RETURNS>
struct kmod_module *mod, unsigned int flags, const char *extra_options, int (*run_install)(struct kmod_module *m, const char *cmdline, void *data), const void *data, void (*print_action)(struct kmod_module *m, bool install, const char *options)
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_name</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_path</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_options</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_install_commands</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_remove_commands</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_dependencies</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_softdeps</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod, struct kmod_list **pre, struct kmod_list **post
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_filtered_blacklist</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_ctx *ctx, const struct kmod_list *input, struct kmod_list **output
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_apply_filter</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_ctx *ctx, enum kmod_filter filter_type, const struct kmod_list *input, struct kmod_list **output
</FUNCTION>
<ENUM>
<NAME>kmod_module_initstate</NAME>
enum kmod_module_initstate {
	KMOD_MODULE_BUILTIN = 0,
	KMOD_MODULE_LIVE,
	KMOD_MODULE_COMING,
	KMOD_MODULE_GOING,
	/* Padding to make sure enum is not mapped to char */
	_KMOD_MODULE_PAD = (1 << 31),
};
</ENUM>
<FUNCTION>
<NAME>kmod_module_initstate_str</NAME>
<RETURNS>const char  *</RETURNS>
enum kmod_module_initstate state
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_initstate</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_refcnt</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_holders</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_sections</NAME>
<RETURNS>struct kmod_list  *</RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_section_get_name</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_section_get_address</NAME>
<RETURNS>unsigned long  </RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_section_free_list</NAME>
<RETURNS>void  </RETURNS>
struct kmod_list *list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_size</NAME>
<RETURNS>long  </RETURNS>
const struct kmod_module *mod
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_info</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_info_get_key</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_info_get_value</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_info_free_list</NAME>
<RETURNS>void  </RETURNS>
struct kmod_list *list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_versions</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_version_get_symbol</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_version_get_crc</NAME>
<RETURNS>uint64_t  </RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_versions_free_list</NAME>
<RETURNS>void  </RETURNS>
struct kmod_list *list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_get_symbols</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_symbol_get_symbol</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_symbol_get_crc</NAME>
<RETURNS>uint64_t  </RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_symbols_free_list</NAME>
<RETURNS>void  </RETURNS>
struct kmod_list *list
</FUNCTION>
<ENUM>
<NAME>kmod_symbol_bind</NAME>
enum kmod_symbol_bind {
	KMOD_SYMBOL_NONE = '\0',
	KMOD_SYMBOL_LOCAL = 'L',
	KMOD_SYMBOL_GLOBAL = 'G',
	KMOD_SYMBOL_WEAK = 'W',
	KMOD_SYMBOL_UNDEF = 'U'
};
</ENUM>
<FUNCTION>
<NAME>kmod_module_get_dependency_symbols</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_module *mod, struct kmod_list **list
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_dependency_symbol_get_symbol</NAME>
<RETURNS>const char  *</RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_dependency_symbol_get_bind</NAME>
<RETURNS>int  </RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_dependency_symbol_get_crc</NAME>
<RETURNS>uint64_t  </RETURNS>
const struct kmod_list *entry
</FUNCTION>
<FUNCTION>
<NAME>kmod_module_dependency_symbols_free_list</NAME>
<RETURNS>void  </RETURNS>
struct kmod_list *list
</FUNCTION>
<STRUCT>
<NAME>kmod_config_iter</NAME>
struct kmod_config_iter;
</STRUCT>
<STRUCT>
<NAME>kmod_ctx</NAME>
struct kmod_ctx;
</STRUCT>
<STRUCT>
<NAME>kmod_list</NAME>
struct kmod_list;
</STRUCT>
<STRUCT>
<NAME>kmod_module</NAME>
struct kmod_module;
</STRUCT>
